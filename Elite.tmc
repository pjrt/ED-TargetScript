include "target.tmh"

//program startup
int main() {

	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&Joystick, MODE_EXCLUDED);
	Configure(&JoystickF18, MODE_EXCLUDED);
	Configure(&Throttle, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);

  if(Init(&EventHandle)) return 1; // declare the event handler, return on error
    
  throttleMappings();
	
	//add initialization code here
}

int tempDelay = 500;

// Maps a key using TEMPO where no-delay is the key itself and `op` happens after the delay
int MapTempoId(int control, int key, int op) {
  
  MapKey(control, key, TEMPO(0, op, tempDelay));
  
  return 1;
}

int throttleMappings() {

  int requestDockingMacro =
    CHAIN(
      PULSE+'1', D()
    , PULSE+'e', D()
    , PULSE+'e', D()
    , PULSE+'d', D()
    , PULSE+SPC, D()
    , PULSE+MOUSE_BTN4);
  MapTempoId(&TWCSThrottle, THAT2L, requestDockingMacro); // Request docking macro
  MapTempoId(&TWCSThrottle, THAT3D, PULSE+'p'); // Wingman navlock
  MapTempoId(&TWCSThrottle, THAT1L, PULSE+'y'); // Long press to next system in path
  MapKey(&TWCSThrottle, TBTN4, TEMPO(PULSE+'j', PULSE+L_SHIFT+'j', tempDelay));

  MapKey(&TWCSThrottle, TBTN5, CHAIN(PULSE+'c', PULSE+'v')); // Chaff + ECM macro

  return 1;
}

//event handler
int EventHandle(int type, alias o, int x) {
  DefaultMapping(&o, x);
	
	//add event handling code here
}
